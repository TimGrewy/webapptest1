{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts","webpack:///./src/title.service.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"ul {\\r\\n  text-align: left;\\r\\n}\\r\\ndelete {\\r\\n  margin-left: 5px;\\r\\n}\\r\\n\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<div style=\\\"text-align:center\\\">\\n  <h1>\\n    Welcome to List thingy!\\n  </h1>\\n  <ul class=\\\"heroes\\\">\\n    <li *ngFor=\\\"let title of titles\\\">\\n      <span>{{title}}</span>\\n      <button class=\\\"delete\\\" title=\\\"delete title\\\" (click)=\\\"delete(title)\\\">x</button>\\n    </li>\\n  </ul>\\n  <div>\\n    <label>Titel:\\n      <input [(ngModel)]=\\\"newTitle\\\" placeholder=\\\"newTitle\\\">\\n    </label>\\n  </div>\\n  <button (click)=\\\"add(newTitle); newTitle=''\\\">\\n    add\\n  </button>\\n\\n\\n</div>\\n\\n\"","import { Component } from '@angular/core';\nimport { TitleService } from '../title.service';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\n\nexport class AppComponent {\n  titles = [];\n  newTitle = \"\";\n\n  constructor(private titleService: TitleService) { }\n\n  ngOnInit() {\n    this.getTitles();\n  }\n\n  getTitles(): void {\n    this.titleService.getTitles()\n        .subscribe(titles => this.titles = titles);\n  }\n\n    add(title: string): void {\n      title = title.trim();\n      if (!title) { return; }\n      this.titleService.addTitle(title)\n        .subscribe(title => {\n          this.titles.push(title);\n        });\n    }\n\n    delete(title: string): void {\n      title = title.trim();\n      if (!title) { return; }\n      this.titleService.deleteTitle(title).subscribe();\n      this.titles = this.titles.filter(h => h !== title);\n    }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule }    from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\n  const httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n  const httpOptionsPost = {\n    headers: new HttpHeaders({ 'Content-Type': 'text/plain' })\n  };\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TitleService {\n  private listUrl = 'http://localhost/rest/scanner/list';  // URL to web api\n  private titleUrl = 'http://localhost/rest/scanner/title';  // URL to web api\n  private listUrlProd = '/rest/scanner/list';  // URL to web api prod\n  private titleUrlProd = '/rest/scanner/title';  // URL to web api prod\n\n  //******************************************************************\n  //CONSTRUCTOR\n  //******************************************************************\n  constructor(private http: HttpClient) { }\n\n    //******************************************************************\n    //PUBLIC METHODS\n    //******************************************************************\n    getTitles (): Observable<Object[]> {\n      return this.http.get<Object[]>(this.listUrlProd)\n          .pipe(\n              catchError(this.handleError('getTitle', []))\n            );\n    }\n\n    /** POST: add a new hero to the server */\n    addTitle (title): Observable<Object> {\n      return this.http.post(this.titleUrlProd, title, httpOptionsPost)\n          .pipe(\n            catchError(this.handleError<Object>('addTitle'))\n          );\n    }\n\n    /** POST: add a new hero to the server */\n    deleteTitle (title): Observable<Object> {\n      return this.http.delete(this.titleUrlProd + \"/\" + title, httpOptionsPost)\n          .pipe(\n            catchError(this.handleError<Object>('deleteTitle'))\n          );\n    }\n\n    //******************************************************************\n    //PRIVATE METHODS\n    //******************************************************************\n    /**\n     * Handle Http operation that failed.\n     * Let the app continue.\n     * @param operation - name of the operation that failed\n     * @param result - optional value to return as the observable result\n     */\n    private handleError<T> (operation = 'operation', result?: T) {\n      return (error: any): Observable<T> => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n\n        // Let the app keep running by returning an empty result.\n        return of(result as T);\n      };\n    }\n}\n"],"sourceRoot":""}